#!/bin/bash

CONFIG_DIR="$HOME/.config/palette"
CONFIG_FILE="$CONFIG_DIR/config"

# Palette used for default option
default_colors=( 
  "#221B36" "#FF427C" "#69FF47" "#FFE722" 
  "#42AED5" "#C1FE00" "#10E080" "#F9F9F9"
  "#0C0E15" "#B30039" "#44D62C" "#E69200"
  "#1060AE" "#96C300" "#32ED4F" "#6C7D9C"
  "#0E0B16" "#171322" "#211C2E" "#322C45"
  "#120033" "#B3C4E0" "#455574" "#6E8EC3"
)

# Color codes used for substitutions
codes=(
  "BL0" "RD0" "GR0" "YW0" "BU0" "MG0" "CY0" "WH0"
  "BL1" "RD1" "GR1" "YW1" "BU1" "MG1" "CY1" "WH1"
  "FG0" "FG1" "FG2" "FG3" "BG0" "BG1" "BG2" "HG0"
)

# Configurations files the program looks up
config_files=(
  "nvim/lua/core/theme/palette.lua"
  "sway/config"
  "yambar/config.yml"
  "foot/foot.ini"
  "swaylock/config"
  "imv/config"
  "zathura/zathurarc"
  "luakit/palette.lua"
)

# Checks if config file exists
check_config () {
  if ! [ "$#" -gt 0 ]; then
    raise_error
    exit 1
  fi
  for file in "${config_files[@]}"; do
    if ! [ -e "$HOME/.config/$file" ]; then
      echo "Error: $HOME/.config/$file does not exist"
      exit 1
    fi
  done
  if ! [ -e "$CONFIG_FILE" ]; then
    echo "Error: default config file does not exist, creating..."
    mkdir -p "$CONFIG_DIR" && touch "$CONFIG_FILE"
    create_palette "Default"
    set_default_palette "Default"
  fi
}

check_palette () {
  local palettes=($(get_palette))
  for palette in "${palettes[@]}"; do
    if [ "$palette" == "$1-" ]; then
      echo ${palette%?}
      return
    fi
    if [ "$palette" == "$1" ]; then
      echo ${palette}
      return
    fi
  done
  echo ''
}

check_input () {
   if [ -z "$1" ]; then
      echo "Error: no palette was supplied"
      exit 1
  fi
  if [ -z "$(check_palette $1)" ]; then
    echo "Error: '$1' palette doesn't seem to exist"
    exit 1
  fi
}

# Populates config file with new palette
create_palette () {
  if [ -n "$(check_palette $1)" ]; then
      echo "Error: cant create palette, name is already in use"
      exit 1
  fi
  if ! [ -s "$CONFIG_FILE" ]; then
    echo "@$1" >> "$CONFIG_FILE"
  else
    echo "" >> "$CONFIG_FILE"
    echo "@$1" >> "$CONFIG_FILE"
  fi

  for color in "${default_colors[@]}"; do
    echo -n $color >> "$CONFIG_FILE"
  done
}

# Return palettes
get_palette () {
  local palettes=()
  while IFS= read -r line; do
    if [[ $line == @* ]]; then
      palettes+=("${line:1}")
    fi
  done < "$CONFIG_FILE"
  echo "${palettes[@]}"
}

get_default_palette () {
  local palettes=($(get_palette))
  for palette in "${palettes[@]}"; do
    if [[ $palette == *- ]]; then
      echo ${palette%?}
    fi
  done
  echo ''
}

set_default_palette () {
  local default=$(get_default_palette)
  if [ -z "$default" ]; then
    sed -i "s/@$1/@$1-/" $CONFIG_FILE
    exit 0
  fi
  check_input "$@"
  if [ $default == "$1" ]; then
    echo "Error: selected palette is already default"
    exit 1
  fi
  sed -i "s/@$default-/@$default/" $CONFIG_FILE
  sed -i "s/@$1/@$1-/" $CONFIG_FILE
}

# Changes hexcolor codes for palette codes
revert_colors () {
  local default=$(get_default_palette)
  if [ -z $default ]; then
    echo "Error: no default palette found, run: palette init"
    exit 1
  fi
  colors=($(get_colors $default))
  for f in "${!config_files[@]}"; do
    for ((i=1; i<${#colors[@]}; i++)); do
      printf "%s" "s/${colors[$i]}/${codes[$((i - 1))]}/;"
    done | { read -r var; sed -e ${var%?} -i $HOME/.config/${config_files[$f]};}
  done
}

# Inverse of reverse_colors
apply_colors () {
  local default=$(get_default_palette)
  if [ -z $default ]; then
    echo "Error: no default palette found, run: palette init"
    exit 1
  fi
  colors=($(get_colors $default))
  for f in "${!config_files[@]}"; do
    for ((i=1; i<${#colors[@]}; i++)); do
      printf "%s" "s/${codes[$((i - 1))]}/${colors[$i]}/;"
    done | { read -r var; sed -e ${var%?} -i $HOME/.config/${config_files[$f]};}
  done
}

# Get colors from inserted palette
get_colors () {
  local line=$(grep -n "@$1" "$CONFIG_FILE" | cut -d: -f1)
  local colors=($( sed -n "$((line + 1))p" "$CONFIG_FILE" | grep -oP '[0-9A-Fa-f]{6}'))
  echo -n "$line " && echo "${colors[@]}"
}

set_colors () {
  check_input "$2"
  local palette=($(get_colors $2))
  local line="${palette[0]}"
  if [ $((($#)%2)) -eq 0 ]; then
    for ((i = 3; i <= $#; i += 2)); do
      local code="${!i}"
      local color="${@:i+1:1}"
      for ((j = 0; j < (${#palette[@]} - 1); j++)); do
        if [ "${codes[$j]}" == "$code" ]; then
          if [[ $color =~ ^[0-9A-Fa-f]{6}$ ]]; then
            sed -i "$((line + 1))s/${palette[$((j + 1))]}/$color/" $CONFIG_FILE
          else
            echo "Error: invalid hexcode, skipping..."
          fi
        fi
      done
    done
    if [ "$2" = $(get_default_palette) ]; then
      revert_colors
      apply_colors
    fi
  else
    echo "Error: hexcode/colorcode not specified"
    exit 1
  fi
}

show_colors () {
  check_input "$@"
  colors=($(get_colors $1))
  echo "Palette:$1"
  for ((color=1; color<${#colors[@]}; color++)); do
    i="${colors[$color]}"
    rgb=$(printf ";%d;%d;%d\n" 0x${i:0:2} 0x${i:2:2} 0x${i:4:2})
    str="\033[48;2${rgb}m${codes[$((color - 1))]}\033[0m"
    printf ''${str}
    if [ $((($color)%8)) -eq 0 ]; then
      echo ''
    fi
  done
}

raise_error () {
  if ! [ -n "$1" ]; then
    echo "Error: no command was specified"
  else
    echo "Error: $1 is not a valid command"
  fi
  show_help
}

show_help () {
  cat <<EOF
  Usage: palette [command] [args]

    commands:
      help                                     : Show this message.
      show    <palette>                        : Show palette colors.
      new     <palette>                        : Create a new color palette.
      set     <palette> <color-id> <hex-color> : Set a new color to a palette.
      select  <palette>                        : set palette as default.
      revert                                   : Transforms hexcodes to colorcodes.
      apply                                    : Transforms colorcodes to hexcodes.
  
EOF
}

palette () {
  check_config "$@"
  case $1 in
  'help')
    show_help	
  ;;
  'show')
    show_colors "$2"
  ;;
  'new')
    create_palette "$2"
  ;;
  'revert')
    revert_colors
  ;;
  'apply')
    apply_colors
  ;;
  'set')
    set_colors "$@"
  ;;
  'select')
    set_default_palette "$2"
  ;;
  *)
    raise_error "$1"
  ;;
  esac
}

palette "$@"
